services:
  mongo1:
    image: mongo:7
    container_name: mongo1
    ports:
      - 27017:27017
    env_file:
      - envs/mongo_db.env
    # Let the official entrypoint handle user creation & initdb scripts
    command:
      [
        "mongod",
        "--replSet",
        "rs0",
        "--keyFile",
        "/etc/mongo-keyfile/keyfile",
        "--bind_ip_all",
      ]
    healthcheck:
      test: mongosh --host localhost:27017 --eval 'db.adminCommand("ping")' || exit 1
      interval: 30s
      timeout: 5s
      start_period: 5s
      start_interval: 1s
      retries: 3
    volumes:
      # Main data volume
      - mongo1_data:/data/db
      # Mount the file to a neutral location inside our container from host
      - ./envs/mongo-keyfile:/envs/mongo-keyfile:ro
      # Windows mount doesn't supprt Unix-style file permission
      # so we need to copy inside a tmpfs (Linux-style in-memory fs)
      - tmp_keyfile:/etc/mongo-keyfile:rw
      # Now after we copy into the Linux-based file system
      # we need to change the permission to chmod 400
      # Init scripts (will run ONCE on first start, in order)
      - ./scripts/mongo-entrypoint.sh:/docker-entrypoint-initdb.d/01-init-keyfile.sh:ro
    tmpfs:
      - /etc/mongo-keyfile
    networks:
      - backend_net

  mongo2:
    image: mongo:7
    container_name: mongo2
    ports:
      - 27018:27017
    env_file:
      - envs/mongo_db.env
    # Let the official entrypoint handle user creation & initdb scripts
    command:
      [
        "mongod",
        "--replSet",
        "rs0",
        "--keyFile",
        "/etc/mongo-keyfile/keyfile",
        "--bind_ip_all",
      ]
    healthcheck:
      test: mongosh --host localhost:27017 --eval 'db.adminCommand("ping")' || exit 1
      interval: 30s
      timeout: 5s
      start_period: 5s
      start_interval: 1s
      retries: 3
    volumes:
      - mongo2_data:/data/db
      - ./envs/mongo-keyfile:/envs/mongo-keyfile:ro
      - tmp_keyfile:/etc/mongo-keyfile:rw
      - ./scripts/mongo-entrypoint.sh:/docker-entrypoint-initdb.d/01-init-keyfile.sh:ro
    tmpfs:
      - /etc/mongo-keyfile
    networks:
      - backend_net

  mongo3:
    image: mongo:7
    container_name: mongo3
    ports:
      - 27019:27017
    env_file:
      - envs/mongo_db.env
    command:
      [
        "mongod",
        "--replSet",
        "rs0",
        "--keyFile",
        "/etc/mongo-keyfile/keyfile",
        "--bind_ip_all",
      ]
    healthcheck:
      test: mongosh --host localhost:27017 --eval 'db.adminCommand("ping")' || exit 1
      interval: 30s
      timeout: 5s
      start_period: 5s
      start_interval: 1s
      retries: 3
    volumes:
      - mongo3_data:/data/db
      - ./envs/mongo-keyfile:/envs/mongo-keyfile:ro
      - tmp_keyfile:/etc/mongo-keyfile:rw
      - ./scripts/mongo-entrypoint.sh:/docker-entrypoint-initdb.d/01-init-keyfile.sh:ro
    tmpfs:
      - /etc/mongo-keyfile
    networks:
      - backend_net

  mongo-init-replica:
    image: mongo:7
    container_name: mongo-init-replica
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
    env_file:
      - envs/mongo_db.env
    volumes:
      # Since we have already created the volume in above services
      - ./scripts/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh:ro
      - ./envs/mongo-keyfile:/etc/mongo-keyfile:ro
    entrypoint: ["bash", "/docker-entrypoint-initdb.d/init-replica.sh"]
    networks:
      - backend_net

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  tmp_keyfile:

networks:
  backend_net:
