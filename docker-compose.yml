services:
  mongo1:
    image: mongo:7
    container_name: mongo1
    ports:
      - 27017:27017
    env_file:
      - envs/mongo_db.env
    volumes:
      # Main data volume
      - mongo1_data:/data/db
      # Windows mount doesn't supprt Unix-style file permission so we need to
      # Mount the file to a neutral location inside our container from host
      - ./envs/mongo-keyfile:/etc/mongo-keyfile:ro
      # Now after we copy into the Linux-based file system
      # we need to change the permission to chmod 400
      # Init scripts (will run ONCE on first start, in order)
    ##### i.e.#####
    # Let the official entrypoint handle user creation & initdb scripts
    # exec docker-entrypoint.sh --replSet rs0 --bind_ip_all --keyFile /data/mongo-keyfile
    # docker-entrypoint.sh handles the entry point
    command: >
      bash -c "
        cp /etc/mongo-keyfile /data/mongo-keyfile &&
        chmod 400 /data/mongo-keyfile &&
        chown 999:999 /data/mongo-keyfile &&
        exec docker-entrypoint.sh --replSet rs0 --bind_ip_all --keyFile /data/mongo-keyfile
      "
    healthcheck:
      test: mongosh --host localhost:27017 --eval 'db.adminCommand("ping")' || exit 1
      interval: 30s
      timeout: 5s
      start_period: 5s
      start_interval: 1s
      retries: 3
    networks:
      - backend_net

  mongo2:
    image: mongo:7
    container_name: mongo2
    ports:
      - 27018:27017
    env_file:
      - envs/mongo_db.env
    command: >
      bash -c "
        cp /etc/mongo-keyfile /data/mongo-keyfile &&
        chmod 400 /data/mongo-keyfile &&
        chown 999:999 /data/mongo-keyfile &&
        exec docker-entrypoint.sh --replSet rs0 --bind_ip_all --keyFile /data/mongo-keyfile
      "
    healthcheck:
      test: mongosh --host localhost:27017 --eval 'db.adminCommand("ping")' || exit 1
      interval: 30s
      timeout: 5s
      start_period: 5s
      start_interval: 1s
      retries: 3
    volumes:
      - mongo2_data:/data/db
      - ./envs/mongo-keyfile:/etc/mongo-keyfile:ro
    networks:
      - backend_net

  mongo3:
    image: mongo:7
    container_name: mongo3
    ports:
      - 27019:27017
    env_file:
      - envs/mongo_db.env
    command: >
      bash -c "
        cp /etc/mongo-keyfile /data/mongo-keyfile &&
        chmod 400 /data/mongo-keyfile &&
        chown 999:999 /data/mongo-keyfile &&
        exec docker-entrypoint.sh --replSet rs0 --bind_ip_all --keyFile /data/mongo-keyfile
      "
    healthcheck:
      test: mongosh --host localhost:27017 --eval 'db.adminCommand("ping")' || exit 1
      interval: 30s
      timeout: 5s
      start_period: 5s
      start_interval: 1s
      retries: 3
    volumes:
      - mongo3_data:/data/db
      - ./envs/mongo-keyfile:/etc/mongo-keyfile:ro
    networks:
      - backend_net

  mongo4:
    image: mongo:7
    container_name: mongo4
    ports:
      - 27020:27017
    restart: always
    command: >
      bash -c "
        cp /etc/mongo-keyfile /data/mongo-keyfile &&
        chmod 400 /data/mongo-keyfile &&
        chown 999:999 /data/mongo-keyfile &&
        exec docker-entrypoint.sh --replSet rs0 --bind_ip_all --keyFile /data/mongo-keyfile
      "
    healthcheck:
      test: mongosh --host localhost:27017 --eval 'db.adminCommand("ping")' || exit 1
      interval: 30s
      timeout: 5s
      start_period: 5s
      start_interval: 1s
      retries: 3
    volumes:
      - ./envs/mongo-keyfile:/etc/mongo-keyfile:ro
    networks:
      - backend_net

  mongo-init-replica:
    image: mongo:7
    container_name: mongo-init-replica
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
      mongo4:
        condition: service_healthy
    env_file:
      - envs/mongo_db.env
    volumes:
      - ./scripts/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh:ro
    entrypoint: ["bash", "/docker-entrypoint-initdb.d/init-replica.sh"]
    networks:
      - backend_net

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:

networks:
  backend_net:
